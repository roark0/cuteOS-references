<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>ATOSE &#187; Homepage &#124; ATOSE</title>
	<atom:link href="http://atose.org/?feed=rss2&#038;cat=6" rel="self" type="application/rss+xml" />
	<link>http://atose.org</link>
	<description>The operating system of the future</description>
	<lastBuildDate>Wed, 11 Sep 2013 21:13:03 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>http://wordpress.org/?v=3.6</generator>
		<item>
		<title>i.MX6 Bare Metal</title>
		<link>http://atose.org/?p=141</link>
		<comments>http://atose.org/?p=141#comments</comments>
		<pubDate>Mon, 17 Jun 2013 05:27:48 +0000</pubDate>
		<dc:creator>Andrew Trotman</dc:creator>
				<category><![CDATA[Homepage]]></category>

		<guid isPermaLink="false">http://atose.otago.ac.nz/?p=141</guid>
		<description><![CDATA[The i.MX6 series of SoCs come in many forms, but we&#8217;re most interested in the quad core i.MX6Q. As we&#8217;re programming it directly (bare metal) and not through any operating system its been necessary to bring up and test each subsystems we&#8217;re using one by one. Here we provide links &#8230;]]></description>
				<content:encoded><![CDATA[<p>The i.MX6 series of SoCs come in many forms, but we&#8217;re most interested in the quad core i.MX6Q.  As we&#8217;re programming it directly (bare metal) and not through any operating system its been necessary to bring up and test each subsystems we&#8217;re using one by one.  Here we provide links to source code to exercise each subsystem.</p>
<p>The development board we&#8217;re using is the SABRE Lite board (compatible) provided by Boundary Devices, the <a href="http://boundarydevices.com/products/sabre-lite-imx6-sbc/">BD-SL-i.MX6</a>.  The <a href="http://atose.org/?page_id=183" title="i.MX6Q Bare Metal Programming">software development environment</a> is based on the GNU tool chain and our own tools.</p>
<p>This site contains a quick and simple guide to getting started with <a href="http://atose.org/?page_id=229" title="Getting Started With ARM i.MX6Q Bare Metal on Mac OS X">Bare Metal on ARM i.MX6Q</a>. Please take a look there for more information.</p>
<p><a href="http://atose.org/?page_id=11" title="i.MX6Q UART">i.MX6Q Universal Asynchronous Receiver/Transmitter (UART), or serial port</a><br />
The SABRE Lite boards we received had two DB9 connectors, one connected to UART1, the other to UART2.  To our surprise the connector labeled &#8220;Console&#8221; was connected to UART2!  This code uses a compile time constant to select between UART1 and UART2.  It has not been tested on any of the others (boards or UARTs). The code as stands configures UART2 at 115200 baud, 8 bits, 1 stop bit, no parity, software flow control.  Make sure you disable hardware flow control in your terminal emulator software (I use minicom on MacOS).</p>
<p><a href="http://atose.org/?page_id=153" title="i.MX6Q EPIT">i.MX6Q Enhanced Periodic Interrupt Timer (EPIT)</a><br />
With the UART working we move on to a periodic timer. The i.MX6Q Enhanced Periodic Interrupt Timer (EPIT) is the ideal subsystem for this.  It allows us to create a u-second level timer. In this example code we spin lock on waiting for the timer.  It does not use interrupts. </p>
<p><a href="http://atose.org/?page_id=162" title="i.MX6Q RAM initialisation">i.MX6Q RAM configuration</a><br />
With I/O and a timer we can turn on the RAM and determine how much RAM is connected. The code to configure the RAM is somewhat unreadable because it was written by reverse engineering the U-boot configuration files for the SABRE Lite board.  As there doesn&#8217;t appear to be any other configurations, this is the one used here.</p>
<p><a href="http://atose.org/?page_id=167" title="i.MX6Q GPT">i.MX6Q General Purpose Timer (GPT)</a><br />
The general purpose timer is an alternative way to measure time. Here we just initialize the thing and a tight loop prints it&#8217;s current value. Note that both the GPT and the EPIT can be used at the same time. </p>
<p><a href="http://atose.org/?page_id=170" title="i.MX6Q GPT Interrupt">i.MX6Q Interrupts from the General Purpose Timer</a><br />
The general purpose timer an be programmed to cause an interrupt. The i.MX6Q uses the ARM Generic Interrupt Controller so we must program that, and then enable the GPT input to it had then connect the GIC to the CPU&#8217;s IRQ line. So this code includes an IRQ handler, programming the GIC, programming the GPT, and output through the UART. </p>
<p><a href="http://atose.org/?page_id=258" title="I.MX6Q USB">i.MX6Q USB</a><br />
This program (which is quite long) make the USB OTG port on the i.MX6Q act as a USB CDC port. In short, it makes the i.MX6Q USB act as a serial port.  If you open a terminal window and connect to this port, it will echo any characters you press.</p>
]]></content:encoded>
			<wfw:commentRss>http://atose.org/?feed=rss2&#038;p=141</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Mac &amp; Windows Code</title>
		<link>http://atose.org/?p=1</link>
		<comments>http://atose.org/?p=1#comments</comments>
		<pubDate>Thu, 30 May 2013 10:56:12 +0000</pubDate>
		<dc:creator>admin</dc:creator>
				<category><![CDATA[Homepage]]></category>

		<guid isPermaLink="false">http://atose.otago.ac.nz/blog/?p=1</guid>
		<description><![CDATA[The hardest difficulty we&#8217;ve faced since the starting on ATOSE has been the availability of source code snippets.  Few people build operating systems, fewer make their code available and even fewer comment that code. As we&#8217;ve developed tools for various machines and for the ATOSE we&#8217;ve documented them and put &#8230;]]></description>
				<content:encoded><![CDATA[<p>The hardest difficulty we&#8217;ve faced since the starting on ATOSE has been the availability of source code snippets.  Few people build operating systems, fewer make their code available and even fewer comment that code.  As we&#8217;ve developed tools for various machines and for the ATOSE we&#8217;ve documented them and put them here (for you to use).  Please let us know if these are useful to you.</p>
<p><strong>Mac &amp; Windows</strong><br />
<a href="http://atose.org/?page_id=205" title="imx_run">imx_run</a><br />
imx_run is a tool we developed to upload ELF and IMX executable files to the i.MX6Q board over the USB. It implements the Freescale USB Serial Download Protocol.</p>
<p><strong>Mac</strong><br />
<a title="List attached HID devices" href="http://atose.otago.ac.nz/?page_id=113">List attached HID devices</a><br />
This Mac OS X program uses native system calls to list the VendorID, ProductID, Vendor Name and Product Name of all Human Input Devices (HID) Devices attached to the Mac.  These will normally be attached via USB (but that is not a HID requirement). This program was developed because the i.MX6Q can boot via USB and when it does it acts as a HID device.</p>
]]></content:encoded>
			<wfw:commentRss>http://atose.org/?feed=rss2&#038;p=1</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
